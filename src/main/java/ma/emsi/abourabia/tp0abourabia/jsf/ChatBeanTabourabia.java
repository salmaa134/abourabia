package ma.emsi.abourabia.tp0abourabia.jsf;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;

import java.io.Serializable;
import java.util.*;

/**
 * Backing bean pour la page JSF index.xhtml.
 * Port√©e view pour conserver l'√©tat de la conversation pendant plusieurs requ√™tes HTTP.
 */
@Named
@ViewScoped
public class ChatBeanTabourabia implements Serializable {

    /**
     * R√¥le "syst√®me" que l'on attribuera plus tard √† un LLM.
     * Possible d'ajouter de nouveaux r√¥les dans la m√©thode getSystemRoles.
     */
    private String systemRole;
    /**
     * Quand le r√¥le est choisi par l'utilisateur dans la liste d√©roulante,
     * il n'est plus possible de le modifier (voir code de la page JSF) dans la m√™me session de chat.
     */
    private boolean systemRoleChangeable = true;

    /**
     * Derni√®re question pos√©e par l'utilisateur.
     */
    private String question;
    /**
     * Derni√®re r√©ponse de l'API OpenAI.
     */
    private String reponse;
    /**
     * La conversation depuis le d√©but.
     */
    private StringBuilder conversation = new StringBuilder();

    /**
     * Contexte JSF. Utilis√© pour qu'un message d'erreur s'affiche dans le formulaire.
     */
    @Inject
    private FacesContext facesContext;

    /**
     * Obligatoire pour un bean CDI (classe g√©r√©e par CDI).
     */
    public ChatBeanTabourabia() {
    }

    public String getSystemRole() {
        return systemRole;
    }

    public void setSystemRole(String systemRole) {
        this.systemRole = systemRole;
    }

    public boolean isSystemRoleChangeable() {
        return systemRoleChangeable;
    }

    public String getQuestion() {
        return question;
    }

    public void setQuestion(String question) {
        this.question = question;
    }

    public String getReponse() {
        return reponse;
    }

    /**
     * setter indispensable pour le textarea.
     *
     * @param reponse la r√©ponse √† la question.
     */
    public void setReponse(String reponse) {
        this.reponse = reponse;
    }

    public String getConversation() {
        return conversation.toString();
    }

    public void setConversation(String conversation) {
        this.conversation = new StringBuilder(conversation);
    }

    /**
     * Envoie la question au serveur.
     * En attendant de l'envoyer √† un LLM, le serveur fait un traitement quelconque, juste pour tester :
     * Le traitement consiste √† copier la question en minuscules et √† l'entourer avec "||". Le r√¥le syst√®me
     * est ajout√© au d√©but de la premi√®re r√©ponse.
     *
     * @return null pour rester sur la m√™me page.
     */
    public String envoyer() {
        if (question == null || question.isBlank()) {
            FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR,
                    "Texte question vide", "Il manque le texte de la question");
            facesContext.addMessage(null, message);
            return null;
        }

        // Nouveau traitement : Analyse linguistique et jeux de mots
        this.reponse = genererReponseOriginale(question);

        if (this.conversation.isEmpty()) {
            this.reponse = "üß† Mode d'analyse linguistique : " + systemRole.toUpperCase(Locale.FRENCH) + "\n" + this.reponse;
            this.systemRoleChangeable = false;
        }

        afficherConversation();
        return null;
    }

    private String genererReponseOriginale(String texte) {
        // Analyse et transformation linguistique
        return String.format("""
        üîç Analyse linguistique de votre texte :
        
        üìè Longueur : %d caract√®res
        üìä Statistiques :
        - Mots : %d
        - Voyelles : %d
        - Consonnes : %d
        
        üé≠ Jeux de mots :
        - Mot le plus long : %s
        - Mot le plus court : %s
        
        üß© D√©fi linguistique :
        %s
        
        üé≤ Bonus cr√©atif :
        %s
        """,
                texte.length(),
                compterMots(texte),
                compterVoyelles(texte),
                compterConsonnes(texte),
                trouverMotPlusLong(texte),
                trouverMotPlusCourt(texte),
                genererDefiLinguistique(texte),
                genererBonusCreatif()
        );
    }

    private int compterMots(String texte) {
        return texte.trim().split("\\s+").length;
    }

    private int compterVoyelles(String texte) {
        return texte.toLowerCase().replaceAll("[^aeiou√©√®√†√π]", "").length();
    }

    private int compterConsonnes(String texte) {
        return texte.toLowerCase().replaceAll("[^bcdfghjklmnpqrstvwxz]", "").length();
    }

    private String trouverMotPlusLong(String texte) {
        return Arrays.stream(texte.split("\\s+"))
                .max(Comparator.comparingInt(String::length))
                .orElse("");
    }

    private String trouverMotPlusCourt(String texte) {
        return Arrays.stream(texte.split("\\s+"))
                .min(Comparator.comparingInt(String::length))
                .orElse("");
    }

    private String genererDefiLinguistique(String texte) {
        String[] defiOptions = {
                "üß© Trouvez un anagramme du mot le plus long !",
                "üîÑ Inversez l'ordre des syllabes du mot le plus court.",
                "üìù √âcrivez une phrase avec tous les mots commen√ßant par la m√™me lettre.",
                "üé≠ Transformez votre texte en charade !",
                "üî† R√©√©crivez votre phrase en utilisant uniquement des mots de 4 lettres."
        };
        return defiOptions[new Random().nextInt(defiOptions.length)];
    }

    private String genererBonusCreatif() {
        String[] bonus = {
                "üåà Votre cr√©ativit√© linguistique est votre plus grand atout !",
                "üöÄ Chaque mot est une aventure, chaque phrase un voyage !",
                "üß† Le langage est un puzzle, et vous en √™tes le ma√Ætre !",
                "‚ú® Votre imagination transforme les mots en magie !",
                "üé® La langue est votre terrain de jeu cr√©atif !"
        };
        return bonus[new Random().nextInt(bonus.length)];
    }
    /**
     * Pour un nouveau chat.
     * Termine la port√©e view en retournant "index" (la page index.xhtml sera affich√©e apr√®s le traitement
     * effectu√© pour construire la r√©ponse) et pas null. null aurait indiqu√© de rester dans la m√™me page (index.xhtml)
     * sans changer de vue.
     * Le fait de changer de vue va faire supprimer l'instance en cours du backing bean par CDI et donc on reprend
     * tout comme au d√©but puisqu'une nouvelle instance du backing va √™tre utilis√©e par la page index.xhtml.
     * @return "index"
     */
    public String nouveauChat() {
        return "index";
    }

    /**
     * Pour afficher la conversation dans le textArea de la page JSF.
     */
    private void afficherConversation() {
        this.conversation.append("== User:\n").append(question).append("\n== Serveur:\n").append(reponse).append("\n");
    }

    public List<SelectItem> getSystemRoles() {
        List<SelectItem> listeSystemRoles = new ArrayList<>();
        // Ces r√¥les ne seront utilis√©s que lorsque la r√©ponse sera donn√©es par un LLM.
        String role = """
                You are a helpful assistant. You help the user to find the information they need.
                If the user type a question, you answer it.
                """;
        listeSystemRoles.add(new SelectItem(role, "Assistant"));
        role = """
                You are an interpreter. You translate from English to French and from French to English.
                If the user type a French text, you translate it into English.
                If the user type an English text, you translate it into French.
                If the text contains only one to three words, give some examples of usage of these words in English.
                """;
        // 1er argument : la valeur du r√¥le, 2√®me argument : le libell√© du r√¥le
        listeSystemRoles.add(new SelectItem(role, "Traducteur Anglais-Fran√ßais"));
        role = """
                Your are a travel guide. If the user type the name of a country or of a town,
                you tell them what are the main places to visit in the country or the town
                are you tell them the average price of a meal.
                """;
        listeSystemRoles.add(new SelectItem(role, "Guide touristique"));

                this.systemRole = (String) listeSystemRoles.getFirst().getValue();
        return listeSystemRoles;
    }
}